@inherits System.Web.Mvc.WebViewPage
<h1>Application.js</h1>

<p>
Application.js is a series of JavaScript modules and mixins that can be used to reduce boilerplate code.
Some of the modules are extensions of Backbone and others may require jQuery, Underscore, or nothing at all.
</p>
<p>
	Below is a list of all modules, however, the rest of the documentation fouces on common usage rather than structure.
</p>
<ul>
	<li>
		General
		<ul>
			<li>Application - Creates a standard facade for common application components.
				Basically a Controller with event aggregation.
			</li>
			<li>
				Controller - A Backbone router with added lifetime view management using regions.
			</li>
			<li>
				Region - A simple abstraction of a dom node.
			</li>
			<li>
				AjaxRequest - Creates an ajax request with deferred execution and provides a handler for http status codes for web apis.
			</li>
			<li>
				JSPM - The client portion of a JavaScript package manager for loading JavaScript packages containing scripts, css, and/or templates.
			</li>
		</ul>
	</li>
	<li>
		Application.Model - The combination of all Backbone Model mixins.
		<ul>
			<li>
				GetSetModelExtension -
			</li>
			<li>
				ValidationModelExtension and ModelErrors -
			</li>
			<li>
				BackupModelExtension -
			</li>
		</ul>
	</li>
	<li>
		Application.View - The combination of all Backbone View mixins.
		<ul>
			<li>
				JSTViewExtension -
			</li>
			<li>
				ModelBinder -
			</li>
			<li>
				FormErrorHandler -
			</li>
			<li>
				CloseViewExtension - 
			</li>
		</ul>
	</li>
	<li>
		UI
		<ul>
			<li>
				Menu - 
			</li>
			<li>
				Dialog -
			</li>
		</ul>
	</li>
</ul>

<h2>Application</h2>
<p>
	The Application provides an entry point to a JavaScript application.
	In it's simplest form an application is created (with or without options) and started using the <code>start</code> method.
</p>
<p>
	Other Application features that can be taken advantage of are routing, regions, view management, and event aggregation.
</p>

<h3>url</h3>
<code>Application.url(url)</code>
<p>
	Used to parse base urls. This method relies upon a global <code>baseUrl</code> property being set, 
	otherwise, the url passed will be returned unchanged.
</p>
<pre class="prettyprint">
window.baseUrl = "/myapp/";
var someUrl = Application.url("path/to/file.html");
=> /myapp/path/to/file.html
</pre>
@*

<pre>
/*
 *	Creates a standard facade for common application components.
 *
 *	Usage:
 *		var MyApp = new Application({
 *			root: "path/to/app",
 *			
 *			routes: {
 *				"": "main",				
 *				"*defaultRoute": "main"
 *			},
 *	
 *			regions: {
 *				"default": "#some-container",				
 *			},
 *	
 *			start: function () {
 *				// fetch data, set up app, etc...
 *			},
 *	
 *			main: function () {						
 *				return {
 *					view: view,
 *					navigate: "/"
 *				};
 *			}
 *		});
 *
 *	Shared event aggregation (all new Application objects will share the same 'events' channel):
 *	MyApp.events.on("object:event", fn);
 *	MyApp.events.trigger("object:event", arg1, arg2);
 *	MyApp.events.off("object:event", fn);
 *
 *	Application views and models that use all view and model extensions:
 * 	    var MyView = Application.View.extend({ ... });
 *	    var MyModel = Application.Model.extend({ ... });
 *
 *	Note:
 *      There is no need of stop method since regions and self management perform cleanup as needed.
 *
 */
</pre>


<h3>Controller</h3>
<h4>root</h4>
<h4>routes</h4>
<h4>regions</h4>
<h4>start</h4>
<h4>main</h4>


	<h3>Region</h3>
	<h3>Ajax Requests (and default handling)</h3>
	<h3>JSPM</h3>

<h2>Model</h2>
	<h3>Getters and Setters</h3>
	<h3>Validation</h3>
	<h3>ModelErrors</h3>
	<h3>Backup and Restore</h3>

<h2>View</h2>
	<h3>Templates</h3>
	<h3>Model Binding</h3>
	<h3>Form Error Handling</h3>
	<h3>View Cleanup (Close)</h3>

<h2>UI</h2>
	<h3>Menu</h3>
	<h3>Dialog</h3>*@


<h2>Model</h2>
/*
 * GetSetModelExtension.js
 * 
 * Description:
 *     Adds getters and setters to models.
 *     Also adjusts the toJSON method to return calculated values.
 *     and provides a refresh method to force a change on the calculated values.
 *
 * Usage:
 *    var SomeModel = Backbone.Model.extend({
 *        initialize: function () {
 *            GetSetModelExtension.extend(this);
 *        },
 *        myProp: {
 *            get: function (currentValue) {
 *                return currentValue; // default behavior
 *            },
 *            set: function (value) {
 *                return value; // default behavior
 *            },
 *            // triggers a change on the property if any of the 'bind' properties change
 *            bind: "someProperty" // can be an array for multiple properties
 *        }  
 *    });
*/
/*
 * Usage:
 *     var SomeModel = Backbone.Model.extend({
 *     	  defaults: {
 *     	  	someField: null
 *     	  },
 *     	  someField: {
 *            validate: {
 *     	  	      required: true,
 *     	  	      min: 0,
 *     	  	      max: 10,
 *     	  	      email: true,
 *     	  	      exclude: "foo",
 *     	  	      custom: function (value) {
 *     	  	   	      if (value === 1) {
 *     	  	   		      return "Value cannot be 1.";
 *     	  	   	        }
 *     	  	       }
 *             }
 *         }
 *     });
 * 
 * 
 * Error notifications:
 *     Whenever a model property changes, its validation is run.
 *     If there are any errors, an "error" will be triggered on the model.
 * 
 *     var sm = new SomeModel();
 *     sm.on("error", function (model, errors, property) {
 *         // errors - hash of property name : array of error messages. { username: ["Required."] }
 *         //     errors will be null if there was an error but it is now cleared
 *         // property - the name of the property that triggered the error.
 *     });
 * 
 *
 *     Calling getErrors will call the validate method on the model with a boolean passed as the only argument.
 *     var errors = sm.getErrors();
 *     if (errors) {
 *          // handle the errors
 *     }
 *
 *     This enables composite validation to execute separate from property change events.
 *     validate: function (onSave) {
 *         if (onSave !== true) {
 *             return;
 *         }
 *      }
 *
 *
 * Adding a global validator:
 *     ValidationModelExtension.validators["exclude"] = function (value, args) {
 *         if (value === args) {
 *     	       retun "The value cannot be " + args;
 *         }
 *     };
 */
/*
 * ModelErrors.js
 * 
 * Description:
 *     Provides a container for model errors, an easy way to add an error and retrieve all errors.
 *
 * Usage:
 *     var errors = new ModelErrors();
 *     if (invalid) {
 *         errors.add("someProperty", "This is an error on the property");
 *     }
 *     return errors.toJSON();
*/
/*
 * BackupModelExtension.js
 * 
 * Description:
 *     A simple memento plugin that handles a single level backup of the JSON representation of the model.
 *
 * Usage:
 *     BackbupModelExtension.extend(someModel);
 *     someModel.store();
 *     someModel.restore();
 */