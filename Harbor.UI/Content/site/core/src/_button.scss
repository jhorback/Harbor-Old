@import "../../mixins/border-radius";
@import "../../mixins/user-select";
@import "../../mixins/_clearfix.scss";
@import "_$z-depth.scss";
@import "_$color.scss";
@import "_$type.scss";
@import "_$vars.scss";



// static light button colors
$button-bg-color-hover-light:        hsla(0, 0%, 60%, .20);
$button-bg-color-hover-light-hex:    #EAEAEA;
$button-bg-color-active-light:       hsla(0, 0%, 60%, .40);
$button-bg-color-active-light-hex:   #D5D5D5;
$button-bg-color-disabled-light:     #E0E0E0;
$button-bg-color-disabled-light-hex: hsla(0, 0%, 0%, .12);
//$button-color-disabled-light:        hsla(0, 0%, 0%, .26); 
//$button-color-disabled-light-hex:    #BCBCBC;

// static dark button colors
$button-bg-color-hover-dark:        hsla(0, 0%, 80%, .15);
$button-bg-color-hover-dark-hex:    #1F1F1F;
$button-bg-color-active-dark:       hsla(0, 0%, 80%, .25);
$button-bg-color-active-dark-hex:   #333333;
$button-bg-color-disabled-dark:     hsla(0,0%,100%, .12);
$button-bg-color-disabled-dark-hex: #1E1E1E;
//$button-color-disabled-dark:        hsla(0,0%,100%, .30); 
//$button-color-disabled-dark-hex:    #4C4C4C;


// .button.flat, .button.flat.loud, .button.flat.attn
// .button, .button.loud, .button.attn
// 
// .iconbutton, .iconbutton.loud, .iconbutton.attn, .iconbutton.disabled ([disabled]), .iconbutton.quiet
// 


// jch! - still working on this one - move it to color.scss when done.
// => icon buttons
// => do the fab button
// => adjust the button height/sizing after taking a look at form input fields
// $effect: "lighten" or "darken" the background color
@mixin button-colors($background-color: "transparent", $effect: "lighten", $color-theme: $color-theme){
   
    @include color-content($color-theme);
	background-color: unquote($background-color);

	&:hover, &:focus { 
        @if ($background-color == "transparent") {
            @if ($color-theme == "dark") { // for the flat style
               background-color: $button-bg-color-hover-dark-hex;
               background-color: $button-bg-color-hover-dark;
            } @else {
               background-color: $button-bg-color-hover-light-hex;
               background-color: $button-bg-color-hover-light;
            }
        } @else {
              @if ($effect == "lighten") {
		        background-color: lighten($background-color, 5%); // is there a way to use opacity here?!
            } @else {
		        background-color: darken($background-color, 5%);
            }
         }
	}

	&:active {
        @include color-content($color-theme); // for links

        @if ($background-color == "transparent") {
             @if ($color-theme == "dark") { // for the flat style
               background-color: $button-bg-color-active-dark-hex;
               background-color: $button-bg-color-active-dark;
            } @else {
               background-color: $button-bg-color-active-light-hex;
               background-color: $button-bg-color-active-light;
            }
        } @else {
              @if ($effect == "lighten") {
		        background-color: lighten($background-color, 10%);
            } @else {
		        background-color: darken($background-color, 10%);
            }
        }         
	}   

	&:visited { @include color-content($color-theme); }
}



@mixin button {
	.button,
	button,
	input[type=button],
	input[type=submit] {
		border: 0;
        outline: 0; 
	    display: inline-block;	
	    text-align: center;		    
	    cursor: default;
	    text-decoration: none;
	    margin: 0 .25em 0 0;
	    padding: .5em 1.75em;
        min-width: 5em;
        @include type-button;
	    @include border-radius;
	    @include user-select("none");
        @include z-depth-button;

        &:active {
             @include z-depth-button-pressed;
             span { // for IE to keep the text from moving
                position: relative; 
                left: 0px;
                top: 0px;
            }
        }

        &.flat {
            font-weight: 700;
            padding: .25em .75em;
            @include z-depth-none;
            &:active {
                @include z-depth-none;
            }
        }

         &[disabled], &[disabled]:hover {
              @include z-depth-none;
         }
	}

	a.button {
		margin-right: 0;
        outline: 0;
		*padding-top: 10px;
		*padding-bottom: 10px;
	} 
}




@mixin button-theme {    
    .button,
	button,
	input[type=button],
	input[type=submit] { 

         @if ($color-theme == "dark") {
            @include button-colors($button-bgcolor-base-dark, $button-effect-dark, $button-color-theme-dark);
        } @else {
            @include button-colors;
        }

        &.loud {
           @include button-colors($button-bg-color-primary, $button-effect-primary, $button-color-theme-primary);
		}
		
        &.attn {
            @include button-colors($button-bg-color-accent, $button-effect-accent, $button-color-theme-accent);	
		}

        &.flat {
            @include button-colors; // transparent bg
            
            &.loud {
                color: $color-primary;
            }
            &.attn {
                color: $color-accent;
            }            
        }

         &[disabled], &[disabled]:hover {
            font-weight: 700;
            @include color-disabled($color-theme);
            @include opacity(1);

		    @if ($color-theme == "dark") {
                background-color: $button-bg-color-disabled-dark-hex;
                background-color: $button-bg-color-disabled-dark;
            } @else {
                background-color: $button-bg-color-disabled-light-hex;
                background-color: $button-bg-color-disabled-light;
            }
              
            &.flat {
               background-color: transparent;
            }     
	    }
    }
}