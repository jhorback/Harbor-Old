@using Harbor.Domain.Files
@using Harbor.Domain.Pages
@using Harbor.UI.Extensions
@using Harbor.UI.Models
@using Harbor.UI.Models.JSPM.Extensions
@using Harbor.UI.JSPkgs
@model Harbor.Domain.Pages.Page
@{
	ViewBag.Title = Model.Title;
	bool noAside = Model.Layout.DisplayProperties.HasFlag(PageLayout.LayoutDisplayProperties.NoAside);
	var layoutClassNames = "page";
	if (Model.Layout.DisplayProperties.HasFlag(PageLayout.LayoutDisplayProperties.ContentCentered))
	{
		layoutClassNames = "page centered";
	}
	layoutClassNames += noAside ? " noaside" : " hasaside";
}
@section head {
	<meta name="description" content="@Model.PreviewText" />
}
@section scripts {
	@if (ViewBag.HasWritePermissions)
	{
		<script>
			context.module("currentPageModel").register("currentPageDto", @Html.Raw(Json.Encode(ViewBag.PageDto)));
		</script>
		@Html.InstallJavaScriptPackage(PageLoaderAppPkg.PackageName)
		<script>
			pageLoader.start();
		</script>
	}
	
	@* add these page properties (ignore in db, use page properties)
	///    page.EnableTitleBackground - default is false
	//     pageDto.titleBackgroundImageUrl - default is null
	//     pageDto.hasTitleBackgroundImage - default is false
	//
	// then have a checkbox appear in the title to set the TitleBackgroundImage
	//  - create a command -> SetTitleBackgroundImage { enable: true }
	//
	//
	// keep in mind updating on the client
	//     - listen to the page model hasTitleBackgroundImage and titleBackgroundImageUrl properties
	//
	// make settable via a page type by having the page type set the pge.EnableTitleBackground = true.
	// 
		*@ 

	@if (Model.PreviewImage != null)
	{
		<style>
			.page-header {
				background-image: url("@FileUrls.GetUrl(Model.PreviewImage, FileResolution.High)");
				background-repeat: no-repeat;
				background-size: cover;
				background-position: 40% 40%;
			}	
		</style>
	}
}
<div id="page" class="@layoutClassNames">
	<header class="page-header">
		<div class="page-header-overlay"></div>
		<div class="page-header-content">
			@if (Model.Layout.HeaderKey != null)
			{
				var header = Model.Layout.HeaderKey;
				<div class="uic" data-type="@header" id="@Model.Layout.Header.Id">
					@Html.PageComponent(Model.PageID, header)
				</div>
			}
		</div>
	</header>
	<div class="page-aside-bg">
		<div class="page-body">
			<aside class="page-aside">
				@if (Model.Layout.AsideKey != null)
				{
					var aside = Model.Layout.AsideKey;
					<div class="uic" data-type="@aside" id="@Model.Layout.Aside.Id">
						@Html.PageComponent(Model.PageID, aside)
					</div>
				}
			</aside>
			<div class="page-content">
				<div class="row">
					@for (int index = 0; index < Model.Template.Content.Count; index++)
					{
						var item = Model.Template.Content[index];
						if (item.StartsNewRow && index != 0)
						{
							@Html.Raw("</div><div class=\"row\">")
						}
						<div class="uic @String.Join(" ", item.ClassNames)" id="@item.Id" data-type="@item.Key">
							@Html.PageComponent(Model.PageID, item.Key, item.Id)
						</div>
					}
				</div>
			</div>
		</div>
	</div>
</div>
<div id="page-modal"></div>