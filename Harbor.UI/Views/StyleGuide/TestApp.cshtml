@{
	ViewBag.Title = "Test App";
}
@section pageheader {
	
}
<div class="page-content">

	
	<div data-templatefor="testApp" class="clear margin-bottom">
		<h1><span name="firstName"></span> <span name="lastName"></span></h1>
		<h2 data-bind="style: hairColorStyle">Hair color: <span name="hairColor"></span></h2>
		<label>Age</label>
		<span name="age"></span>
		<label>Ice cream</label>
		<span name="favoriteIceCreamDisplay"></span>
		
		<hr />
		<div data-templatefor="testAppChildView" data-model="child">
			Child is: <span name="firstName"></span> <span name="lastName"></span> Age: <span name="age"></span>
			<span name="hairColor" data-bind="style: hairColorStyle"></span>
			Favorite icecream: <span name="favoriteIceCreamDisplay"></span>
		</div>
		<div class="margin-top margin-bottom">
			<button data-event="increaseAge">Increase Age</button>
			<button data-event="decreaseAge">Decrease Age</button>
		</div>
		<hr />

		
		<fieldset class="form-inline">
			<legend>Add a user</legend>
			<label>First</label>
			<input type="text" name="firstName" />
			<label>Last</label>
			<input type="text" name="lastName" />
			<label>Age</label>
			<input type="text" name="age" />
			<div>
				<span>Favorite icecream:</span>
				
				<select name="favoriteIceCream" data-bind="style: hairColorStyle">					
					<option data-collection="iceCream" data-bind="value: id, text: flavor"></option>
				</select>
				
				
				
				@*<select name="favoriteIceCream">
					<option value="1">HC Chocolate</option>
					<option value="2">HC STraw</option>
					<option value="3">HC VAn</option>
				</select>*@
				
			</div>
			<button data-event="clickAddUser" class="loud">Add</button>
		</fieldset>
		
		<div class="pad" data-bind="showif: firstName">
			<button data-event="removeUser">Remove last user</button>
			<button data-event="sortUsers">Sort Users</button>
			<button data-event="fetch">Reset</button>
		</div>

		<ul>
			<li xdata-templatefor="allUsersView"
			    data-collection="allUsers"
				data-itemview="allUsersItemView" data-bind="style: hairColorStyle">
				<span name="firstName"></span> <span name="lastName"></span> Age: <span name="age"></span>
				<span name="hairColor"></span>
				<span name="favoriteIceCreamDisplay"></span>
				<button data-event="removeThisUser">Remove</button>
			</li>
			
			@*<li data-itemview="allUsersItemView"
			    data-collection="allUsers">
				<span data-bind="style: hairColorStyle">
					<span name="firstName"></span> <span name="lastName"></span> Age: <span name="age"></span>
					<span name="hairColor"></span>
					<button data-event="removeThisUser">Remove</button>
				</span>
			</li>*@
		</ul>
		
		
		<div data-templatefor="showIfTestView">
			<label for="showIt" data-event="mouseenter: showIt, mouseleave: hideIt">Show It</label>
			<input type="checkbox" id="showIt"/>
			<button class="attn" data-bind="showif:showIt">
				It Is Visible
			</button>
		</div>

	</div>
	
	
</div>

@section scripts {
	<script>

		
		/*
		Things to consider:
		Above there is duplication on the display of the user - is this fabricated because of the example 
		or what is a way to DRY this up (i.e. use reusable templates)?
		*/

		var data = {
			users: [
				{ firstName: "John", lastName: "Horback", age: "39", favoriteIceCream: 1 },
				{ firstName: "Johnny", lastName: "Horback", age: "1", favoriteIceCream: 2 },
				{ firstName: "Sophia", lastName: "Horback", age: "6", favoriteIceCream: 2 },
				{ firstName: "Larisa", lastName: "Horback", age: "32", favoriteIceCream: 3 }
			],
			iceCream: [
				{ id: 1, flavor: "Chocolate", price: "1.25" },
				{ id: 2, flavor: "Strawberry", price: "1.10" },
				{ id: 3, flavor: "Vanilla", price: "1.00" }
			]
		};

		var ta = app("testApp").use("bbext");

		ta.start(["app", function (app) {

			//debugger;
			app.render();

		}]);


		ta.view("showIfTestView", function (options, modelFactory) {
			this.modelFactory = modelFactory;
		}, {
			$inject: ["options", "modelFactory"],
			initialize: function () {
				this.model = this.modelFactory.create("model", {
					showIt: false
				});
			},
			showIt: function () {
				this.model.set("showIt", true);
			},
			hideIt: function () {
				this.model.set("showIt", false);
			}
		});


		ta.model("user", function (attrs, options, userRepo) {

			this.userRepo = userRepo;

		}, {
			$inject: ["attrs", "options", "userRepo"],
			defaults: {
				firstName: null,
				lastName: null,
				age: 0,
				hairColor: "Unknown",
				hairColorStyle: "",
				favoriteIceCream: null,
				favoriteIceCreamDisplay: null
			},
			age: {
				get: function (value) {
					return parseInt(value);
				}
			},
			hairColor: {
				get: function () {
					var age = this.get("age");
					if (age < 1) { return "Bald"; }
					if (age < 10) { return "Tan"; }
					if (age < 20) { return "Red"; }
					if (age < 30) { return "Purple"; }
					if (age < 40) { return "Brown"; }
					if (age < 50) { return "Gray"; }
					return "Bald";
				},
				bind: ["age"]
			},
			hairColorStyle: {
				get: function () {
					return "color: " + this.get("hairColor");
				},
				bind: ["age"]
			},
			favoriteIceCream: {
				get: function (value) { 
					return parseInt(value);
				}
			},
			favoriteIceCreamDisplay: {
				get: function (value) {
					var favId =  this.get("favoriteIceCream"),
						iceCream = this.userRepo.getIceCream().findWhere({ id: favId });
					var ret = iceCream ? iceCream.get("flavor") : "Unknown";
					return ret + ":" + favId;
				},
				bind: ["favoriteIceCream"]
			}
		});

		ta.collection("users", {
			model: "user",
			comparator: function (user) {
				return user.get("age");
			},
			updateSort: function (fn) {
				this.comparator = fn;
				this.sort();
				this.trigger("reset");
			}
		});

		ta.service("userRepo", ["collectionFactory", function (collectionFactory) {

			var usersCollection, iceCreamCollection;

			return {
				getUsers: function () {
					if (!usersCollection) {
						usersCollection = collectionFactory.create("users", data.users);
					}
					return usersCollection;
				},

				getIceCream: function () {
					if (!iceCreamCollection) {
						iceCreamCollection = collectionFactory.create("collection", data.iceCream);
					}
					return iceCreamCollection;
				}
			};

		}]);


		ta.view("testApp", ["options", "modelFactory", "userRepo",
				function (options, modelFactory, userRepo) {

					this.modelFactory = modelFactory;
					this.userRepo = userRepo;

				}], {
					initialize: function () {
						var users;
						
						this.model = this.modelFactory.create("user", data.users[1]);

						users = this.userRepo.getUsers();
						this.model.child = users.find(function (user) {
							return user.get("firstName").toLowerCase() === "johnny";
						});
						this.model.allUsers = users;
						
						var iceCream = this.userRepo.getIceCream();
						this.model.iceCream = iceCream;
						
						setTimeout(_.bind(function () {
							this.addUser({
								firstName: "wow",
								lastName: "zers"
							});
						}, this), 2000);
					},

					clickAddUser: function () {
						this.addUser(this.model.toJSON());
					},

					addUser: function (model) {
						this.model.allUsers.add(model);
					},

					removeUser: function () {
						var index = this.model.allUsers.length - 1;
						var model = this.model.allUsers.at(index);
						this.model.allUsers.remove(model);
					},

					increaseAge: function () {

						this.model.set("age", this.model.get("age") + 1);
						this.model.child.set("age", this.model.child.get("age") + 1);
					},

					decreaseAge: function () {
						this.model.set("age", this.model.get("age") - 1);
						this.model.child.set("age", this.model.child.get("age") - 1);
					},

					sortUsers: function () {
						var views = this.views;
						// debugger;
						this.model.allUsers.updateSort(function (user) {
							return user.get("firstName").toLowerCase();
						});
					},

					fetch: function () {
						this.model.allUsers.reset(data.users);
					}
				});

		ta.view("testAppChildView", {
			initialize: function () {
				var model = this.model;
			}
		});


		ta.view("allUsersView", {
			// itemView: "allUsersItemView"
			//,onRender: function () {
			//	var thisView = this;
			//	this.listenTo(this.collection, "add", function () {
			//		var views = thisView.views;
			//		debugger;
			//	});
			//}
		});

		ta.view("allUsersItemView", function (options, userRepo) {
			this.userRepo = userRepo;
		}, {
			$inject: ["options", "userRepo"],

			initialize: function () {
				//var iceCream = this.userRepo.getIceCream();
				//this.model.iceCream = iceCream;
			},

			removeThisUser: function () {
				var cid = this.model.cid;
				var users = this.userRepo.getUsers();
				var model = users.find(function (user) {
					return user.cid === cid;
				});
				users.remove(model);
			}
		});


		ta.start();
	</script>
}
